
; Events have 1 argument.

(define-macro (events-items e)
  (let ((resultado (list 'case (list 'first e))))
    (setq resultado 
	  (append resultado
		  (list     
		   '("Start"
		    (if (= (nth 1 e) wmiiscript)
			(exit)))
		   '("Key"
		    (Key (last e)))

		   '("CreateTag"
		     (! 
		      (format "echo '%s' %s | wmiir create \"/lbar/%s\"" 
			      WMII_NORMCOLORS (last e) (last e))))

		   '("DestroyTag" 
		    (! 
		     (format "wmiir remove \"/lbar/%s\"" (last e))))

		   '("FocusTag" 
		    (!
		     (format "wmiir xwrite \"/lbar/%s\" '%s' \"%s\"" 
			     (last e) WMII_FOCUSCOLORS (last e))))

		   '("UnfocusTag" 
		    (! 
		     (format "wmiir xwrite \"/lbar/%s\" '%s' \"%s\" " 
			     (last e) WMII_NORMCOLORS (last e))))

		   '("UrgentTag"
		    (! 
		     (format "wmiir xwrite \"/lbar/%s\" \"*%s\"" (last e) (last e))))
  
		   '("NotUrgentTag"	
		    (!
		     (format "wmiir xwrite \"/lbar/%s\" \"%s\"" (last e) (last e))))

		   '("LeftBarClick LeftBarDND" 
		    '(! (format "wmiir xwrite /ctl view \"%s\"" (last e))))

		   '("Unresponsive" 
		    (let
			((client (first e)))
		      (setq e (last e))
		      (setq msg 
			    (append "The following client is not responding."
				    "What would you like to do?\n"))

		      (setq read-label
			    (first (exec "wmiir read /client/sel/label")))

		      (setq resp 
			    (exec ;client WMII_FONT msg
			     (format 
			      (append "wihack -transient %s "
				      "xmessage -nearmouse -buttons Kill,Wait -print "
				      "-fn %s %s %s" 
				      client wmii_font msg read-label))))

		      (if (= resp "Kill")
			  (exec (process 
				 (format "wmiir xwrite /client/%s/ctl slay " client)))
			  )))

		   '("Notice"
		    (begin
		      (! (format "wmiir xwrite %s %s"  noticebar wi_arg))
		      (catch 
		       (destroy xpid))
		      (setq xpid 
			    (fork 
			     (sleep (* noticetimeout 1000))
			     (format "wmiir xwrite %s  " noticebar)))
		      )
		    )
		   '("" true)
		   )
		  )
	  )
    resultado)
)



(setq Events (key-list (events-items e)))


(define (Event e)
  (eval (events-items e))
)
